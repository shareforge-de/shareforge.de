#!/bin/bash

DEV_MODE=false
ARG=""

HELP=false
# ARG Variables

SITE_NAME="Shareforge Template Site"

CREATE='new'
DELETE='del'
BUILD='build'
MAKE='make'
SERVE='serve'

KEY="hashed time + system name - special characters"

# MIGRATE='migrate'
# IMPORT='import'


# Parse arguments
for arg in "$@"; do
    case $arg in
        --help)
            echo "Usage: shareforge <argument> <optional flag>"
            echo "Example: shareforge create -n <name> # Makes the project with the specified name"
            echo "Available Arguments:"
            echo ""
            echo "--help | Shows this prompt"
            echo "Note you must use --help or -h BEFORE the other argument"
            echo "Ex. | shareforge --help create"
            echo "create | Creates a new project in the relative directory"
            HELP=true
            echo "help isnt implemented fully"
            echo "$HELP"
            ;;
        --dev-test)
            DEV_MODE=true
            shift
            ;;
        dev-test)
            if [ "$DEV_MODE" = false ]; then
                DEV_MODE=true
            fi
            shift
            ;;
        create)
            for arg in "$@"; do
                case $arg in
                    --name)
                    shift
                    ;;
                    -n)
                    # logic to detect the string afterward
                    # should set $SITE_NAME to the string after -n (--name)
                    shift
                    ;;

                esac
            done
            # Help Logic
            echo "$HELP"
            if [ "$HELP" = true ]; then
                echo "Usage of $arg:"
            fi
            if [ "$HELP" == false ]; then
                echo "Creating a new project in the current directory"
                mkdir -p ./dev-project/docs/
                cp /var/lib/shareforge/config/default.yml ./dev-project/mkdocs.yml
                echo "site_name: $SITE_NAME"
                cp /etc/shareforge/requirements.txt ./dev-project/requirements.txt
                cp -r /opt/shareforge/default/ ./dev-project/docs/
                touch ./dev-project/.shareforge
                cd ./dev-project/
                echo "$KEY" > .shareforge
            fi
            shift
            ;;
        build)
            pip install -r requirements.txt
            mkdocs build
            clear
            shift
            ;;
        clean-up)
            shift
            ;;
        *)
            echo "Invalid Argument"
            shift
            exit 1
            ;;
    esac
done


#if [ "$DEV_MODE" = false ] && [ -z "$ARG" ]; then
#    echo "Usage: shareforge <optional-argument> [--dev-test]"
#    echo "Example: shareforge <arg>"
#    echo "Dev mode: shareforge <arg> --dev-test (or shareforge dev-test)"
#    exit 1
#fi
#if [ "$HELP" =  false ]; then
#    echo "main logic"    
#fi

# Dev-test specific logic (customize this block)
if [ "$DEV_MODE" = true ]; then
    
    echo "=== DEV-TEST MODE ACTIVATED ==="
    echo "Debug info: Running in development/testing environment."
    echo "Simulating test: Would run unit tests or verbose logs here."
    
    echo ""
    
    cpuModel=$(lscpu | grep 'Model name' |cut -d ' ' -f 3- | sed -e 's/^[[:space:]]*//')
    echo "Model: ${cpuModel}"
    arch=$(lscpu | grep 'Architecture' |awk '{print $2}' | head -n 1)
    echo "Architecture: ${arch}"
    cores=$(lscpu | grep 'CPU(s)' |awk '{print $2}' | head -n 1)
    echo "Cores: ${cores}"
    sysMemoryMemTotal=$(grep 'MemTotal' < /proc/meminfo | awk '{print $2}' | head -n 1)
    echo "RAM (MB): ${sysMemoryMemTotal} "
    Uptime=$(uptime -p)
    echo "System Uptime: ${Uptime}"
    echo ""
    echo "Dev mode complete. Exiting with status 0."
    exit 0
fi